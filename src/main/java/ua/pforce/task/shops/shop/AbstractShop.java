package ua.pforce.task.shops.shop;

import ua.pforce.task.shops.dao.IShopsDao;
import ua.pforce.task.shops.domain.Category;
import ua.pforce.task.shops.domain.Product;

import java.util.Collection;
import java.util.List;
import java.util.Map;

public abstract class AbstractShop {

    protected IShopsDao shopsDao;

    public void setShopsDao(final IShopsDao shopsDao) {
        this.shopsDao = shopsDao;
    }

    /** A collection of categories for the shop,
     * mapped by category names, which are unique within the shop
     * This collection is a hardcoded relationship between shops and categories.
     */
    protected Map<String, Category> categories;

    /**
     * A collection view of the categories for this shop.
     * @return collection of categories for this shop.
     */
    public Collection<Category> getCategories() {
        return categories.values();
    }

    /**
     * Saves the product to the database, under the provided category.
     * @param product the product to save.
     * @param categoryName The name of the category, under which the product is saved.
     *                     Throws IllegalArgumentException, if there is no such category in the shop.
     * @return The new product object with autogenerated id, if the save was successful.
     * Throws RuntimeException exception otherwise.
     */
    public Product addProductToCategory(final Product product, final String categoryName) {
        Category category = getCategory(categoryName);
        return shopsDao.addProductToCategory(product, category);
    }

    /**
     * Reads the list of products under provided category from the database.
     * @param categoryName the name of the category
     *                     Throws IllegalArgumentException, if there is no such category in the shop.
     * @return the list of products.
     */
    public List<Product> getProductsByCategory(final String categoryName) {
        Category category = getCategory(categoryName);
        return shopsDao.getProductsByCategory(category);
    }

    /**
     * Reads the product with the provided id.
     * If there is no product with such id, returns null
     * @param id the id of the product to read.
     * @return New product object, or null, if there is no product with provided id.
     */
    public Product getProductById(final long id) {
        return shopsDao.getProductById(id);
    }

    /**
     * Updates the status of the provided products in the database.
     * @param products the list of products to update the status.
     * @return true, if all individual updates were successful; false otherwise.     *
     */
    public boolean updateProductsStatus(final List<Product> products) {
        return shopsDao.updateProductsStatus(products);
    }

    /**
     * Updates the price of the provided products in the database.
     * @param products the list of products to update the status.
     * @return true, if all individual updates were successful; false otherwise.     *
     */
    public boolean updateProductsPrice(final List<Product> products) {
        return shopsDao.updateProductsPrice(products);
    }

    /**
     * A helper method to get category enum instance by category name.
     * @param categoryName
     * @return
     */
    protected Category getCategory(final String categoryName) {
        Category category = categories.get(categoryName);
        if (category == null) {
            throw new IllegalArgumentException("No such category in this class");
        }
        return category;
    }
}
